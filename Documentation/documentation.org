#+title: Polyclot 0.0.1 documentation
#+author: Daniel <jackdaniel> Kochma≈Ñski
#+email: daniel@turtleware.eu
#+date: [2019-11-04 pon]

* Overview

Polyclot is a tool to draw interactive charts in CLIM. Purpose of this
document is to provide information on how to plot data and how to
create new types of charts. Tool may be used by other CLIM
applications as a library or as a standalone utility to render charts.


* Development

** Coding conventions
 - class names are enclosed in brackets, i.e ~<data-frame>~
 - type names are enclosed in percentage characters, i.e ~%index%~
 - anaphoric macro variable names should start with caret, i.e ~^it~
 - implementation is in a single package ~eu.turtleware.polyclot.impl~

** Utilities
 Our implementaiton package USEs alexandria. Other utilities when added
 should be documented here.

*** (define-class <name> superclass slots &rest options)              :macro:

 Defines a class <name>, its constructor function <name> (trampoline to
 a make-instance) and a variable <name> which contains the class
 object. Accepts additional option ~:stealth-mixin~ which makes this
 class a superclass of the victim.

 #+BEGIN_SRC common-lisp
 (define-class <record-positions> (<data-frame>)
   ((ink :initform clim:+red+))
   (:stealth-mixin clim:output-record-history)
   (:documentation "OUTPUT-RECORD position scatterplot."))
 #+END_SRC

 Possibility to mix into the existing class allows interpreting objects
 defined in unrelated libraries as i.e a dataframe.


* Data frames
** Overview
#+include: doc-dataframe.org
** Reference
#+include: ref-dataframe.org

* Layered grammar for graphics
** Overview
** Reference

* Standalone utility
** Interactive plotting
** Plotting to other formats
# # This is part of the old documentation. It will need to change to
# # match the new abstraction, but the gist of the functionality is to
# # allow plotting directly form a non-CLIM REPL.

# # All charts may be rendered with a ~FORMAT-CHART~ function. For
# # instance to render a simple line chart with two data series evaluate
# # in a REPL the following snippet:

# # #+BEGIN_SRC lisp
# #   (format-chart '((1 2 3 4 5)
# #                   (1 2 4 8 16))
# #                 :chart-type :line)
# #   ;; Amazing physics going on...
# # #+END_SRC

# # The first argument is a list of series to be drawn. How each serie is
# # interpreted depends on a chart type. In this particular case elements
# # are consecutive y values (and x is assumed to start at 0 with step 1).

# # ~:chart-type~ argument allows to specify a desired chart. Function
# # accepts other keyword arguments which depend on a chart type. Range
# # for X and Y axis in this example are inferred automatically but in
# # principle each serie may have its own scale, scale and step (for
# # functions).

# # Another typical use of the library is to plot a function. We need to
# # specify the X range and step.

* Embedding in a CLIM application
** As a frame
** As a pane
** As an output record
   
* Extending Polyclot
