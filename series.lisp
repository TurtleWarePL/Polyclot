(in-package #:eu.turtleware.polyclot)

;;; Protocol class for all kinds of series.
(define-class <serie> ()
  ((name :initarg :name :reader name :type string)))

(define-class <boring-serie> (<serie>)
  ((vals :initarg :vals :initarg :data :reader vals)
   (elts :initarg :elts :initarg :data :reader elts))
  (:documentation "Data serie protocol class."))

;;; This class is a little tricky. FUN-SERIE is defined by its domain
;;; (generated by STEP) and the function FUNC itself. Each call to
;;; STEP returns a sequence of N values which are then fed to FUNC as
;;; an argument. FUNC returns a sequence of M values and (optionally)
;;; a second argument with the object. It must be that N+M =
;;; dimensionality of the serie.
#+ (or)
(define-class <fun-serie> (<serie>)
  ((func :initarg :func :reader   func))
  (:documentation "Function serie protocol class."))

;;; dwim functions
(defgeneric make-1-serie (data)
  (:method ((data t))
    (<boring-serie> :data data :name "(unknown)"))
  (:method ((data list))
    (let ((label (if (stringp (elt data 0))
                     (pop data)
                     "(unknown)")))
      (<boring-serie> :data data :name label))))

(defgeneric make-series (data)
  (:method ((data list))
    (let ((label (if (stringp (elt data 0))
                     (pop data)
                     "(no label)"))
          (series (mapcar #'make-1-serie data)))
      (values series label))))

(defgeneric serie-dimensions (serie)
  (:method ((serie <boring-serie>))
    (let ((vals (vals serie)))
      (cond ((null vals) nil)
            ((atom vals) 0)
            (t (length vals))))))

(defparameter *0d-series*
  (make-series '("0D series"
                 3
                 ("serie 1" . 4)
                 ("serie 2" . 1)
                 ("serie 3" . 3)
                 ("serie 4" . 2)
                 ("serie 4" . 2)
                 ("serie 4" . 6)
                 ("serie 4" . 3))))

(defparameter *1d-series*
  (make-series '("1D series"
                 ;; (1 2)
                 ;; ((3) (4))
                 ("serie 1" 4 2 4 2 4 2 4 2)
                 ("serie 2" 2 3 4 5 6 7 8 9)
                 ("serie 3" 0 1 1 2 3 5 8 12)
                 ("serie 4" 9 4 1 0 1 4 9 16))))

(defparameter *2d-series*
  (flet ((make-serie (fun range)
           (let ((res nil))
             (dotimes (v 64 res)
               (let ((r (random range)))
                 (push (list r (funcall fun r)) res))))))
    (make-series `("2D series"
                   ((0 0))
                   ("sin"  ,@(make-serie #'sin 10.0))
                   ("cos"  ,@(make-serie #'cos 10.0))
                   ("exp"  ,@(make-serie #'exp (/ pi 2)))
                   ("sqrt" ,@(make-serie #'sqrt 10.0))))))

(defparameter *3d-series*
  (make-series `("3D series"
                 ((0 0 0))
                 ("serie 3" ((0 0 0) (1 1 1) (2 2 2) (3 3 3) (4 4 4)))
                 ("serie 3" ((0 0 0) (1 0 1) (2 0 2) (3 0 3) (4 0 4)))
                 ("serie 3" ((0 0 0) (0 1 1) (0 2 2) (0 3 3) (0 4 4))))))

(defparameter *1d-series-bench* (make-series (make-bench-series)))
(defparameter *1d-series-bench-2* (make-series (nth-value 1 (make-bench-series))))

(defun make-bench-series ()
  (let ((chart-name (first *benchmark-data*))
        (real-times (make-hash-table :test #'equalp))
        (consing    (make-hash-table :test #'equalp)))
    (dolist (implementation (rest *benchmark-data*))
      (dolist (benchmark (rest implementation))
        (let ((row-name (first benchmark))
              (serie-1-elt (second benchmark))
              (serie-2-elt (third benchmark)))
          (push serie-1-elt (gethash row-name real-times))
          (push serie-2-elt (gethash row-name consing)))))
    (climi::collect (s s2)
      (maphash (lambda (k v) (s (list* k (nreverse v)))) real-times)
      (maphash (lambda (k v) (s2 (list* k (nreverse v)))) consing)
      (values (list* chart-name (s))
              (list* chart-name (s2))))))

(defparameter *benchmark-data*
  `("Benchmarks 2019-05-17"
    ;; real time vs cons
    ("ECL cfloat" ("3D-ARRAYS/CFLOAT" 7.584 8063995760)
                  ("2D-ARRAYS/CFLOAT" 4.153 4031996480)
                  ("1D-ARRAYS/CFLOAT" 0.203 132795408)
                  ("3D-ARRAYS" 1.652 48000096)
                  ("2D-ARRAYS" 0.826 24000048)
                  ("1D-ARRAYS" 0.061 601712)
                  ("FRPOLY/CFLOAT" 0.46 126776192)
                  ("FRPOLY/FLOAT" 0.398 126776560)
                  ("MANDELBROT/DFLOAT" 0.36 173141536)
                  ("MANDELBROT/COMPLEX" 0.079 41879984))
    ("ECL 16.1.3" ("3D-ARRAYS/CFLOAT" 12.134 5311998752)
                  ("2D-ARRAYS/CFLOAT" 6.161 2656004464)
                  ("1D-ARRAYS/CFLOAT" 0.169 66396496)
                  ("3D-ARRAYS" 1.569 48000096)
                  ("2D-ARRAYS" 0.769 24000048)
                  ("1D-ARRAYS" 0.06 600000)
                  ("FRPOLY/CFLOAT" 1.003 367138704)
                  ("FRPOLY/FLOAT" 0.433 126775856)
                  ("MANDELBROT/DFLOAT" 0.374 164964592)
                  ("MANDELBROT/COMPLEX" 0.333 144335760))
    ("SBCL 1.5.2" ("3D-ARRAYS/CFLOAT" 0.986 384000272)
                  ("2D-ARRAYS/CFLOAT" 0.343 192000240)
                  ("1D-ARRAYS/CFLOAT" 0.032 36781456)
                  ("3D-ARRAYS" 1.145 48000256)
                  ("2D-ARRAYS" 0.437 24000048)
                  ("1D-ARRAYS" 0.019 600048)
                  ("FRPOLY/CFLOAT" 0.518 126772064)
                  ("FRPOLY/FLOAT" 0.208 67418944)
                  ("MANDELBROT/DFLOAT" 0.006 950272)
                  ("MANDELBROT/COMPLEX" 0.101 172869680))
    ("CCL 1.11.5" ("3D-ARRAYS/CFLOAT" 0.905834 384000752)
                  ("2D-ARRAYS/CFLOAT" 0.437583 192000656)
                  ("1D-ARRAYS/CFLOAT" 0.059784 36799888)
                  ("3D-ARRAYS" 0.844952 48000432)
                  ("2D-ARRAYS" 0.408137 24000336)
                  ("1D-ARRAYS" 0.012321 600528)
                  ("FRPOLY/CFLOAT" 0.755518 126777600)
                  ("FRPOLY/FLOAT" 0.344996 67427200)
                  ("MANDELBROT/DFLOAT" 0.018233 8812800)
                  ("MANDELBROT/COMPLEX" 0.160377 206164800))
    #+ (or)
    ("CLISP 2.49" ("3D-ARRAYS/CFLOAT" 55.73578 5312013224)
                  ("2D-ARRAYS/CFLOAT" 25.945595 2656013176)
                  ("1D-ARRAYS/CFLOAT" 0.721146 66413440)
                  ("3D-ARRAYS" 10.445144 48000984)
                  ("2D-ARRAYS" 4.857581 24000936)
                  ("1D-ARRAYS" 0.183598 601200)
                  ("FRPOLY/CFLOAT" 2.721316 186128000)
                  ("FRPOLY/FLOAT" 1.482195 67427200)
                  ("MANDELBROT/DFLOAT" 1.10242 95062400)
                  ("MANDELBROT/COMPLEX" 1.524403 149089600))))
